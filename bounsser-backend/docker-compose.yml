version: "3.8"

services:
  # Main application
  app:
    build:
      context: .
      dockerfile: docker/Dockerfile.dev
    container_name: bouncer-backend
    ports:
      - "3000:3000"
      - "9090:9090" # Metrics port
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://bouncer:bouncer_password@postgres:5432/bouncer_dev
      - REDIS_URL=redis://redis:6379
      - REDIS_SESSION_URL=redis://redis:6379/1
      - PORT=3000
      - METRICS_PORT=9090
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - bouncer-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: bouncer-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=bouncer_dev
      - POSTGRES_USER=bouncer
      - POSTGRES_PASSWORD=bouncer_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - bouncer-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bouncer -d bouncer_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: bouncer-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - bouncer-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s

  # Redis Commander (Redis GUI)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: bouncer-redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=admin
      - HTTP_PASSWORD=admin
    depends_on:
      - redis
    networks:
      - bouncer-network
    restart: unless-stopped
    profiles:
      - tools

  # PgAdmin (PostgreSQL GUI)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: bouncer-pgadmin
    ports:
      - "8080:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@bouncer.com
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./docker/pgadmin/servers.json:/pgadmin4/servers.json:ro
    depends_on:
      - postgres
    networks:
      - bouncer-network
    restart: unless-stopped
    profiles:
      - tools

  # Prometheus (Metrics Collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: bouncer-prometheus
    ports:
      - "9091:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    depends_on:
      - app
    networks:
      - bouncer-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana (Metrics Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: bouncer-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - bouncer-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Worker: Stream Processing
  stream-worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.dev
    container_name: bouncer-stream-worker
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://bouncer:bouncer_password@postgres:5432/bouncer_dev
      - REDIS_URL=redis://redis:6379
      - WORKER_TYPE=stream
    command: npm run worker:stream
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - bouncer-network
    restart: unless-stopped
    profiles:
      - workers

  # Worker: Webhook Processing
  webhook-worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.dev
    container_name: bouncer-webhook-worker
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://bouncer:bouncer_password@postgres:5432/bouncer_dev
      - REDIS_URL=redis://redis:6379
      - WORKER_TYPE=webhook
    command: npm run worker:webhook
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - bouncer-network
    restart: unless-stopped
    profiles:
      - workers

  # Worker: Scoring Engine
  scoring-worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.dev
    container_name: bouncer-scoring-worker
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://bouncer:bouncer_password@postgres:5432/bouncer_dev
      - REDIS_URL=redis://redis:6379
      - WORKER_TYPE=scoring
    command: npm run worker:scoring
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - bouncer-network
    restart: unless-stopped
    profiles:
      - workers

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: bouncer-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - bouncer-network
    restart: unless-stopped
    profiles:
      - proxy

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  bouncer-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
